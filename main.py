from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters import BoundFilter
from aiogram.utils.exceptions import FileIsTooBig
from datetime import datetime
import urllib.request
import asyncio
import sqlite3
import logging
import random
#################################################################################################################################
from config import *
from text_config import *
#################################################################################################################################
con = sqlite3.connect('db.db')
cur = con.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users(
	id INTEGER,
	username TEXT,
	is_banned BOOL DEFAULT(False),
	is_TermsAccepted BOOL DEFAULT(False),
	balance INTEGER DEFAULT(0),
	earned INTEGER DEFAULT(0),
	from_refer_id INTEGER,
	get_from_referals INTEGER DEFAULT(0)
	)''')
cur.execute('''CREATE TABLE IF NOT EXISTS payment_services(
	id INTEGER,
	username TEXT,
	payment_service TEXT,
	details TEXT,
	amount INTEGER
	)''')
cur.execute('''CREATE TABLE IF NOT EXISTS logs(
	id INTEGER,
	uid INTEGER,
	username TEXT,
	download_url TEXT,
	date TIMESTAMP,
	filename TEXT,
	status BOOT DEFAULT(False)
	)''')
cur.execute('''CREATE TABLE IF NOT EXISTS withdraw(
	id INTEGER,
	uid INTEGER,
	username TEXT,
	status BOOL DEFAULT(False),
	amount INTEGER,
	payment_service TEXT,
	date TIMESTAMP,
	details TEXT
	)''')
cur.execute('''CREATE TABLE IF NOT EXISTS bysoblazn(
	lastlogid INTEGER
	)''')
class states(StatesGroup):
	upload=State()
	send_msg=State()
	msg_endcheck=State()
	add_balance=State()
	take_balance=State()
	search_user=State()
	message_to_everyone=State()
	spam_check_photo=State()
	add_photo_spam=State()
	add_photo_spam2=State()
	without_photo_spam=State()
	withdraw_details=State()
	withdraw_amount=State()
#################################################################################################################################
storage = MemoryStorage()
bot = Bot(token=tg_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO,)
#################################################################################################################################
SplitList = lambda sample_list, chunk_size: [sample_list[i:i+chunk_size] for i in range(0, len(sample_list), chunk_size)]
def kb_viewlog(logid,uid):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫—É':f'admin_endcheck&{logid}','–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':f'admin_sendmsg&{uid}','–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å':f'admin_givebalance&{uid}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data=f'admin_logs_unchecked'))
	return keyboard
def kb_terms(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'‚úÖ –ü—Ä–∏–Ω—è—Ç—å':f'terms_accept&{id}','üìõ –û—Ç–∫–ª–æ–Ω–∏—Ç—å':f'terms_decline&{id}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	return keyboard
def kb_menu(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏':f'logs_upload&{id}','‚è≥ –õ–æ–≥–∏ –≤ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ':f'logs_unchecked&{id}','üë§ –ü—Ä–æ—Ñ–∏–ª—å':f'user_profile&{id}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.add(InlineKeyboardButton('‚òé –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='tp'))
	if str(id) in str(admins):
		s={'':'_','–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':'admin_all_users','–õ–æ–≥–∏ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É':'admin_logs_unchecked','–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥':'admin_requests_withdraw','–†–∞—Å—Å—ã–ª–∫–∞':'admin_message_to_everyone'}
		for x in s:
			keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	elif str(id) in str(workers):
		s={'':'_','–õ–æ–≥–∏ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É':'admin_logs_unchecked'}
		for x in s:
			keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	return keyboard
def kb_profile(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'üíµ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤':f'user_withdraw&{id}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='main_menu'))
	return keyboard
def kb_back():
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='main_menu'))
	return keyboard
def kb_logs():
	cur.execute('SELECT * FROM logs WHERE status=0')
	flogs=[]
	for log in cur.fetchall(): flogs.append(
		{
		"username":log[2],
		"userid":log[1],
		"logurl":log[3],
		"logid":log[0],
		"upload_time":log[4],
		"FileName":log[5]
		}
		)
	Logs = SplitList(flogs, 8)
	Keyboards = []
	for i in range(len(Logs)):
		buttons = [buttons for buttons in SplitList([types.InlineKeyboardButton(text=f"{log['logid']} | {log['username']}", callback_data=f"admin_viewlog&{log['logid']}") for log in Logs[i]], 2)]
		buttons.append([
			types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_previouslogspage"),
			types.InlineKeyboardButton(text="üîú –î–∞–ª–µ–µ", callback_data="admin_nextlogspage"),
		])
		buttons.append([
			types.InlineKeyboardButton(text="‚¨Ö–ù–∞–∑–∞–¥", callback_data="main_menu")
		])

		Keyboards.append(types.InlineKeyboardMarkup(inline_keyboard=buttons))

	return Keyboards
def kb_logs_user(id):
	cur.execute(f'SELECT * FROM logs WHERE (status,uid)=(False,{id})')
	flogs=[]
	for log in cur.fetchall(): flogs.append(
		{
		"username":log[2],
		"userid":log[1],
		"logurl":log[3],
		"logid":log[0],
		"upload_time":log[4],
		"FileName":log[5]
		}
		)
	Logs = SplitList(flogs, 8)
	Keyboards = []
	for i in range(len(Logs)):
		buttons = [buttons for buttons in SplitList([types.InlineKeyboardButton(text=f"{log['logid']} | {log['username']}", callback_data=f"logs_viewlog&{log['logid']}") for log in Logs[i]], 2)]
		buttons.append([
			types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="logs_previouslogspage"),
			types.InlineKeyboardButton(text="üîú –î–∞–ª–µ–µ", callback_data="logs_nextlogspage"),
		])
		buttons.append([
			types.InlineKeyboardButton(text="‚¨Ö–ù–∞–∑–∞–¥", callback_data="main_menu")
		])

		Keyboards.append(types.InlineKeyboardMarkup(inline_keyboard=buttons))

	return Keyboards
def kb_adm_user(uid):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':f'admin_sendmsg&{uid}','–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å':f'admin_givebalance&{uid}','–ó–∞–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å':f'admin_takebalance&{uid}'}
	for x in s:
			keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	cur.execute(f'SELECT is_banned FROM users WHERE id={int(uid)}')
	if cur.fetchone()[0] == 0: keyboard.insert(InlineKeyboardButton('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'admin_banuser&{uid}'))
	else: keyboard.insert(InlineKeyboardButton('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'admin_unbanuser&{uid}'))
	keyboard.insert(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='main_menu'))
	return keyboard
def kb_user_withdraw(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	for x in payment_services:
		keyboard.insert(InlineKeyboardButton(status[payment_services[x].split('&')[2]]+str(x),callback_data=payment_services[x]))
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥', callback_data=f'user_profile&{id}'))
	return keyboard
def kb_need_withdraw(id,ps):
	keyboard = InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
	s={'–†–µ–∫–≤–∏–∑–∏—Ç—ã':f'wwwithdraw_details&{id}&{ps}','–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞':f'wwwithdraw_amount&{id}&{ps}','–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å':f'wwwithdraw_send&{id}&{ps}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='user_withdraw'))
	return keyboard
def kb_withdraw():
	keyboard=InlineKeyboardMarkup(row_width=3,resize_keyboard=True)
	cur.execute('SELECT * FROM withdraw WHERE status=False')
	all_trans=cur.fetchall()
	for trans in all_trans:
		keyboard.insert(InlineKeyboardButton(f'{trans[2]} | {trans[4]} —Ä',callback_data='wwwithdrawshow&{}'.format(trans[0])))
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='main_menu'))
	return keyboard
def kb_withdr(id,uid):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	s={'–£–¥–∞—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥':f'admwwwithdraw_success&{id}','–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥':f'admwwwithdraw_fail&{id}'}
	for x in s:
		keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.insert(InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',url='tg://user?id={}'.format(uid)))
	keyboard.insert(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data='admin_requests_withdraw'))
	return keyboard
def kb_back_logs(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data=f'logs_unchecked&{id}'))
	return keyboard
def kb_back_withdraws(id):
	keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
	keyboard.add(InlineKeyboardButton('‚¨Ö–ù–∞–∑–∞–¥',callback_data=f'wwwithdrawi&{id}&true'))
	return keyboard
class IsBanned(BoundFilter):
	async def check(self, message: types.Message):
		cur.execute('SELECT is_banned FROM users WHERE id={}'.format(message.from_user.id))
		data=cur.fetchone()
		if data is not None:
			if data[0] == 1: return False
			else: return True
		else: return True
#################################################################################################################################
@dp.message_handler(IsBanned(), CommandStart())
async def start(message: types.Message):
	id=message.from_user.id
	arg = message.get_args()
	if arg == '': arg=666
	cur.execute(f'SELECT is_TermsAccepted FROM users WHERE id={message.from_user.id}')
	data=cur.fetchone()
	if data is None:
		cur.execute(f'INSERT INTO users(id,username,from_refer_id) VALUES({message.from_user.id},"{message.from_user.username}",{int(arg)})')
		con.commit()
		try:
			await bot.send_message(arg,f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nüë§ <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ')
		except Exception as error:
			print(error)
			await message.answer('<b>–ü–æ—Ö–æ–∂–µ —Ç–æ—Ç –∫—Ç–æ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É–∂–µ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º :(</b>')
		await message.answer(terms_text, reply_markup=kb_terms(id))
	elif data[0] == 0:
		cur.execute(f'INSERT INTO users(id,username,from_refer_id) VALUES({message.from_user.id},"{message.from_user.username}",{int(arg)})')
		con.commit()
		try:
			await bot.send_message(arg,f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nüë§ <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ')
		except Exception as error:
			print(error)
			await message.answer('<b>–ü–æ—Ö–æ–∂–µ —Ç–æ—Ç –∫—Ç–æ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É–∂–µ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º :(</b>')
		await message.answer(terms_text, reply_markup=kb_terms(id))
	else:
		await message.answer('<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>', reply_markup=kb_menu(id))
@dp.callback_query_handler(IsBanned(), text_startswith="terms")
async def terms(call: types.CallbackQuery):
	id=call.from_user.id
	include=call.data.split("&")
	if str(include[0].split("_")[1]) == "accept":
		cur.execute('UPDATE users SET is_TermsAccepted=True')
		con.commit()
		await call.message.delete()
		await call.answer('–ë–æ–ª—å—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤!')
		await call.message.answer('<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>', reply_markup=kb_menu(id))
	else:
		def kb_temp():
			keyboard=InlineKeyboardMarkup(row_width=1,resize_keyboard=True)
			s={'–•–æ—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º':'send_terms'}
			for x in s:
				keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
			return keyboard
		await bot.edit_message_text('<b>–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ –ø—Ä–∏–Ω—è–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ!</b>', call.from_user.id, call.message.message_id, reply_markup=kb_temp())
@dp.callback_query_handler(IsBanned(), text='send_terms')
async def send_terms(call: types.CallbackQuery):
	id=call.from_user.id
	await call.message.delete()
	await call.message.answer(terms_text, reply_markup=kb_terms(id))
@dp.callback_query_handler(text_startswith="logs")
async def logs(call: types.CallbackQuery, state: FSMContext):
	id=call.from_user.id
	if "upload" in str(call.data):
		await bot.edit_message_text(logs_upload_text,call.from_user.id,call.message.message_id)
		await states.upload.set()
		async with state.proxy() as data:
			data["message_to_delete"] = call.message
		dp.register_message_handler(upload_logs, state=states.upload, content_types=["text", "document"])
	elif 'unchecked' in str(call.data):
		LogsKb = kb_logs_user(id)
		if len(LogsKb) == 0:
			await call.answer(text="–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
			return
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] = 0
			await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:", reply_markup=LogsKb[0])
	elif 'viewlog' in str(call.data):
		logid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM logs WHERE id={logid}')
		logdata = cur.fetchone()
		await call.message.edit_text(f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: <code>{datetime.fromtimestamp(logdata[4])}</code>\nLogs ID: <code>{logdata[0]}</code>\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏: <code>{logdata[3]}</code>", reply_markup=kb_back_logs(logdata[0]))
	elif 'nextlogspage' in str(call.data):
		LogsKb = kb_logs_user(id)
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] += 1
			try:
				await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:", reply_markup=LogsKb[StateData["CurrentLogsPage"]])
			except IndexError:
				StateData["CurrentLogsPage"] = len(LogsKb) - 1
				await call.answer(text="–ö–æ–Ω–µ—Ü")
				return
	elif 'previouslogspage' in str(call.data):
		LogsKb = kb_logs_user(id)
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] -= 1
			if StateData["CurrentLogsPage"] < 0:
				StateData["CurrentLogsPage"] = 0
				await call.answer(text="–ù–∞—á–∞–ª–æ")
				return
			await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:",reply_markup=LogsKb[StateData["CurrentLogsPage"]])
@dp.callback_query_handler(IsBanned(), text_startswith="admin")
async def admin(call: types.CallbackQuery, state: FSMContext):
	if 'logs_unchecked' in str(call.data):
		LogsKb = kb_logs()
		if len(LogsKb) == 0:
			await call.answer(text="–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
			return
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] = 0
			await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:", reply_markup=LogsKb[0])
	elif 'nextlogspage' in str(call.data):
		LogsKb = kb_logs()
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] += 1
			try:
				await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:", reply_markup=LogsKb[StateData["CurrentLogsPage"]])
			except IndexError:
				StateData["CurrentLogsPage"] = len(LogsKb) - 1
				await call.answer(text="–ö–æ–Ω–µ—Ü")
				return
	elif 'previouslogspage' in str(call.data):
		LogsKb = kb_logs()
		async with state.proxy() as StateData:
			StateData["CurrentLogsPage"] -= 1
			if StateData["CurrentLogsPage"] < 0:
				StateData["CurrentLogsPage"] = 0
				await call.answer(text="–ù–∞—á–∞–ª–æ")
				return
			await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {StateData['CurrentLogsPage'] + 1}/{len(LogsKb)}\n–õ–æ–≥–∏:",reply_markup=LogsKb[StateData["CurrentLogsPage"]])
	elif 'viewlog' in str(call.data):
		logid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM logs WHERE id={logid}')
		logdata = cur.fetchone()
		await call.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b><a href='tg://user?id={logdata[1]}'>{logdata[2]}</a></b>\nUser ID: <code>{logdata[1]}</code>\n\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: <code>{datetime.fromtimestamp(logdata[4])}</code>\nLogs ID: <code>{logdata[0]}</code>\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏: <code>{logdata[3]}</code>", reply_markup=kb_viewlog(logid,logdata[1]))
	elif 'sendmsg' in str(call.data):
		uid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM users WHERE id={uid}')
		user=cur.fetchone()
		await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user[1]}|<code>{user[0]}</code>\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[4]}\n\n–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?</b>')
		await states.send_msg.set()
		async with state.proxy() as data:
			data["uid"] = uid
			data["message_to_delete"] = call.message
	elif 'endcheck' in str(call.data):
		logid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM logs WHERE id={logid}')
		log=cur.fetchone()
		cur.execute(f'SELECT * FROM users WHERE id={log[1]}')
		user=cur.fetchone()
		await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user[1]}|<code>{user[0]}</code>\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[4]}\nLogID: <code>{logid}</code>\n\n–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞?</b>')
		await states.msg_endcheck.set()
		async with state.proxy() as data:
			data["uid"] = user[0]
			data["logid"] = log[0]
			data["message_to_delete"] = call.message
	elif 'givebalance' in str(call.data):
		uid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM users WHERE id={uid}')
		user=cur.fetchone()
		await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user[1]}|<code>{user[0]}</code>\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[4]}\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>')
		await states.add_balance.set()
		async with state.proxy() as data:
			data["uid"] = user[0]
			data["message_to_delete"] = call.message
	elif 'takebalance' in str(call.data):
		uid = int(call.data.split("&")[1])
		cur.execute(f'SELECT * FROM users WHERE id={uid}')
		user=cur.fetchone()
		await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user[1]}|<code>{user[0]}</code>\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[4]}\n\n–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>')
		await states.take_balance.set()
		async with state.proxy() as data:
			data["uid"] = user[0]
			data["message_to_delete"] = call.message
	elif 'all_users' in str(call.data):
		await call.message.edit_text(f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏</b>')
		await states.search_user.set()
		async with state.proxy() as data:
			data["message_to_delete"] = call.message
	elif 'message_to_everyone' in str(call.data):
		await call.message.edit_text(f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>')
		await states.message_to_everyone.set()
		async with state.proxy() as data:
			data["message_to_delete"] = call.message
	elif 'unbanuser' in str(call.data):
		id=int(call.data.split('&')[1])
		if str(id) not in str(admins):
			cur.execute(f'UPDATE users SET is_banned=False WHERE id={int(id)}')
			con.commit()
			try: await bot.send_message(id, '<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>')
			except: pass
			await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>')
		else:
			await call.message.edit_text('–ê–¥–º–∏–Ω–∞ –Ω–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å, —Ç–∞–∫ —á—Ç–æ –∑–∞—á–µ–º –µ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å?')
	elif 'banuser' in str(call.data):
		id=int(call.data.split('&')[1])
		if str(id) not in str(admins):
			cur.execute(f'UPDATE users SET is_banned=True WHERE id={id}')
			con.commit()
			try: await bot.send_message(id, '<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>')
			except: pass
			await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>')
		else:
			await call.message.edit_text('<b>–¢—ã —á–µ –µ–±–∏–∫, –∑–∞—á–µ–º –∞–¥–º–∏–Ω–∞ –∑–∞–±–∞–Ω–∏—Ç—å —Ö–æ—á–µ—à—å?</b>')
	elif 'requests_withdraw' in str(call.data):
		await call.message.edit_text('<b>–í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>',reply_markup=kb_withdraw())
@dp.callback_query_handler(IsBanned(), text_startswith="user_withdraw")
async def user_withdraw(call: types.CallbackQuery, state: FSMContext):
	await call.message.edit_text(withdraw_text,reply_markup=kb_user_withdraw(call.from_user.id))
@dp.callback_query_handler(IsBanned(), text_startswith="wwwithdraw")
async def user_withdraw(call: types.CallbackQuery, state: FSMContext):
	id=call.from_user.id
	payment_service=call.data.split('&')
	if 'wwwithdrawi' in str(call.data):
		if payment_service[2] == 'false': await call.answer('üìõ –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üìõ')
		else:
			cur.execute(f'SELECT details,amount FROM payment_services WHERE (id,payment_service)=({id},"{payment_service[1]}")')
			reqs=cur.fetchone()
			if reqs is None: 
				det='–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
				am='–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
			else: 
				det=reqs[0]
				am=reqs[1]
			await call.message.edit_text(f'–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>{payment_service[1]}</b>\n\n–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{det}</code>\n–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>{am}</code> —Ä', reply_markup=kb_need_withdraw(id,payment_service[1]))
	elif 'details' in str(call.data):
		cur.execute(f'SELECT details FROM payment_services WHERE (id,payment_service)=({id},"{payment_service[2]}")')
		reqs=cur.fetchone()
		if reqs is None: reqs='–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
		else: reqs=reqs[0]
		await states.withdraw_details.set()
		async with state.proxy() as data:
			data['msg_1']=await call.message.edit_text(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ <b>{payment_service[2]}</b> –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—ë—Ç –æ–ø–ª–∞—Ç–∞.\n–¢–µ–∫—É—â–∏–µ: <code>{reqs}</code>')
			data['uid'] = payment_service[1]
			data['payment_service'] = payment_service[2]
	elif 'amount' in str(call.data):
		cur.execute(f'SELECT amount FROM payment_services WHERE (id,payment_service)=({id},"{payment_service[2]}")')
		reqs=cur.fetchone()
		if reqs is None: reqs='–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
		else: reqs=reqs[0]
		await states.withdraw_amount.set()
		async with state.proxy() as data:
			data['msg_1']=await call.message.edit_text(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ <b>{payment_service[2]}</b>.\n–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <code>{reqs}</code>')
			data['uid'] = payment_service[1]
			data['payment_service'] = payment_service[2]
	elif 'send' in str(call.data):
		cur.execute(f'SELECT * FROM payment_services WHERE (id,payment_service)=({id},"{payment_service[2]}")')
		us=cur.fetchone()
		if us is None: await call.answer('–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ')
		else:
			cur.execute(f'SELECT balance FROM users WHERE id={id}')
			balik=int((cur.fetchone())[0])
			if int(us[4]) > balik: await call.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ')
			else:
				cur.execute('SELECT * FROM withdraw')
				cur.execute(f'INSERT INTO withdraw(id,uid,username,amount,payment_service,date,details) VALUES({len(cur.fetchall())+1},{id},"{call.from_user.username}",{us[4]},"{payment_service[2]}",{round(datetime.now().timestamp())},"{us[3]}")')
				cur.execute(f'UPDATE users SET balance={balik-int(us[4])} WHERE id={id}')
				con.commit()
				await call.message.edit_text(f'<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ</b>')
				for x in admins:
					await bot.send_message(x,f'<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}\nID: <code>{id}</code>\n–ü–ª–∞—Ç—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {payment_service[1]}\n–°—É–º–º–∞: <code>{us[4]}</code> —Ä\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {us[3]}</b>')
	elif 'show' in str(call.data):
		cur.execute('SELECT * FROM withdraw WHERE id={}'.format(payment_service[1]))
		user=cur.fetchone()
		await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]}\nID: <code>{user[0]}</code>\n–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {user[5]}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {user[4]}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: {user[7]}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {user[6]}</b>',reply_markup=kb_withdr(user[0],user[1]))
@dp.callback_query_handler(IsBanned(), text_startswith="admwwwithdraw")
async def admwwwithdraw(call: types.CallbackQuery, state: FSMContext):
	id=call.from_user.id
	status=call.data.split('&')
	if 'success' in str(call.data):
		cur.execute('UPDATE withdraw SET status=True WHERE id={}'.format(status[1]))
		con.commit()
		cur.execute('SELECT uid FROM withdraw WHERE id={}'.format(status[1]))
		uid=(cur.fetchone())[0]
		await bot.send_message(uid,'–í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ')
		await call.message.edit_text('<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>',reply_markup=kb_back())
	if 'fail' in str(call.data):
		cur.execute('UPDATE withdraw SET status=True WHERE id={}'.format(status[1]))
		con.commit()
		cur.execute('SELECT uid FROM withdraw WHERE id={}'.format(status[1]))
		uid=(cur.fetchone())[0]
		await bot.send_message(uid,'–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω')
		await call.message.edit_text('<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>',reply_markup=kb_back())
#################################################################################################################################
@dp.callback_query_handler(IsBanned(), text='main_menu')
async def main_menu(call: types.CallbackQuery):
	id=call.from_user.id
	arg = call.message.get_args()
	if arg == '': arg=852275785
	cur.execute(f'SELECT is_TermsAccepted FROM users WHERE id={call.from_user.id}')
	data=cur.fetchone()
	if data is None:
		cur.execute(f'INSERT INTO users(id,username,from_refer_id) VALUES({call.from_user.id},"{call.from_user.username}",{int(arg)})')
		con.commit()
		try:
			await bot.send_message(arg,f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nüë§ <a href="tg://user?id={call.from_user.id}">{call.from_user.first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ')
		except Exception as error:
			print(error)
			await call.message.answer('<b>–ü–æ—Ö–æ–∂–µ —Ç–æ—Ç –∫—Ç–æ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É–∂–µ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º :(</b>')
		await call.message.answer(terms_text, reply_markup=kb_terms(id))
	if data[0] == 0:
		cur.execute(f'INSERT INTO users(id,username,from_refer_id) VALUES({call.from_user.id},"{call.from_user.username}",{int(arg)})')
		con.commit()
		try:
			await bot.send_message(arg,f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\nüë§ <a href="tg://user?id={call.from_user.id}">{call.from_user.first_name}</a> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ')
		except Exception as error:
			print(error)
			await call.message.answer('<b>–ü–æ—Ö–æ–∂–µ —Ç–æ—Ç –∫—Ç–æ –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —É–∂–µ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º :(</b>')
		await call.message.answer(terms_text, reply_markup=kb_terms(id))
	else:
		await bot.edit_message_text('<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>',call.from_user.id,call.message.message_id, reply_markup=kb_menu(id))
@dp.callback_query_handler(IsBanned(), text_startswith='user_profile')
async def user_profile(call: types.CallbackQuery):
	id=call.from_user.id
	cur.execute(f'SELECT * FROM users WHERE id={id}')
	user_data=cur.fetchone()
	cur.execute(f'SELECT id FROM users WHERE from_refer_id={id}')
	refs=len(cur.fetchall())
	await bot.edit_message_text(user_profile_text.format(user_data[1],user_data[0],user_data[4],user_data[5],user_data[7],refs,percentage_of_referral,botdata.username,id),call.from_user.id, call.message.message_id,reply_markup=kb_profile(id))
@dp.callback_query_handler(IsBanned(), text="tp")
async def tp(call: types.CallbackQuery):
	id=call.from_user.id
	await bot.edit_message_text(tp_text,call.from_user.id,call.message.message_id, reply_markup=kb_back())
#################################################################################################################################
@dp.message_handler(state=states.send_msg)
async def send_msgg(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		uid = data["uid"]
		msg_to_del = data["message_to_delete"]
	await state.finish()
	await message.delete()
	await msg_to_del.delete()
	try:
		await bot.send_message(uid, f'<b>–í–∞–º</b> –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>–ê–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: <b>{message.text}</b>')
		await message.answer('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=kb_back())
	except Exception as error:
		await message.answer(f'üìõ –ù–µ—É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üìõ\n\n–û—à–∏–±–∫–∞: <code>{error}</code>')
@dp.message_handler(state=states.msg_endcheck)
async def msg_endcheck(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		uid = data["uid"]
		logid = data["logid"]
		msg_to_del = data["message_to_delete"]
	await state.finish()
	await message.delete()
	await msg_to_del.delete()
	cur.execute(f'UPDATE logs SET status=True WHERE id={logid}')
	con.commit()
	try:
		await bot.send_message(uid, f'<b>–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nLogs ID:</b> <code>{logid}</code>\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ç—Ä–∞–±–æ—Ç—á–∏–∫–∞: <b>{message.text}</b>')
		await message.answer('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=kb_back())
	except Exception as error:
		await message.answer(f'üìõ –ù–µ—É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üìõ\n\n–û—à–∏–±–∫–∞: <code>{error}</code>')
@dp.message_handler(state=states.add_balance)
async def add_balance(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		uid = data["uid"]
		msg_to_del = data["message_to_delete"]
	await state.finish()
	if message.text.isdigit():
		await message.delete()
		await msg_to_del.delete()
		cur.execute(f'SELECT balance,earned,from_refer_id FROM users WHERE id={uid}')
		gg=cur.fetchone()
		newbal=int(gg[0])+int(message.text)
		all_time=int(gg[1])+int(message.text)
		cur.execute(f'SELECT id,balance,earned,get_from_referals FROM users WHERE id={gg[2]}')
		another=cur.fetchone()
		an_newbal=int(another[1])+(int(message.text)*(percentage_of_referral/100))
		an_alltime=int(another[2])+(int(message.text)*(percentage_of_referral/100))
		an_fromreferals=int(another[3])+(int(message.text)*(percentage_of_referral/100))
		cur.execute(f'UPDATE users SET (balance,earned,get_from_referals)=({an_newbal},{an_alltime},{an_fromreferals}) WHERE id={another[0]}')
		cur.execute(f'UPDATE users SET (balance,earned)=({newbal},{all_time}) WHERE id={uid}')
		con.commit()
		try: bot.send_message(another[0],'<b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ <code>{}</code> —Ä\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{}</code></b>'.format(int(message.text)*(percentage_of_referral/100),an_newbal))
		except: pass
		try:
			await bot.send_message(uid, f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{newbal}</code></b>')
			await message.answer('<b>‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω ‚úÖ</b>', reply_markup=kb_back())
		except Exception as error:
			await message.answer(f'<b>üìõ –ù–µ—É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìõ\n\n–û—à–∏–±–∫–∞: <code>{error}</code></b>')
	else:
		def kb_temp():
			keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
			s={'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É':f'admin_givebalance&{uid}','‚¨Ö–ù–∞–∑–∞–¥':'main_menu'}
			for x in s:
				keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
			return keyboard
		await message.answer('<b>üìõ –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üìõ\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!</b>',reply_markup=kb_temp())
@dp.message_handler(state=states.take_balance)
async def take_balance(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		uid = data["uid"]
		msg_to_del = data["message_to_delete"]
	await state.finish()
	if message.text.isdigit():
		await message.delete()
		await msg_to_del.delete()
		cur.execute(f'SELECT balance FROM users WHERE id={uid}')
		newbal=int(cur.fetchone()[0])-int(message.text)
		cur.execute(f'UPDATE users SET balance={newbal} WHERE id={uid}')
		con.commit()
		try:
			await bot.send_message(uid, f'–í–∞—à –±–∞–ª–∞–Ω—Å —É–±–∞–≤–ª–µ–Ω!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{newbal}</code>')
			await message.answer('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–±–∞–≤–ª–µ–Ω ‚úÖ', reply_markup=kb_back())
		except Exception as error:
			await message.answer(f'üìõ –ù–µ—É–¥–∞–ª–æ—Å—å —É–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìõ\n\n–û—à–∏–±–∫–∞: <code>{error}</code>')
	else:
		def kb_temp():
			keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
			s={'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É':f'admin_takebalance&{uid}','‚¨Ö–ù–∞–∑–∞–¥':'main_menu'}
			for x in s:
				keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
			return keyboard
		await message.answer('<b>üìõ –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üìõ\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!</b>',reply_markup=kb_temp())
@dp.message_handler(state=states.search_user)
async def search_user(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		msg_to_del = data["message_to_delete"]
	await state.finish()
	await message.delete()
	await msg_to_del.delete()
	if message.text.isdigit():
		cur.execute(f'SELECT * FROM users WHERE id={int(message.text)}')
		user=cur.fetchone()
		ban={0:'–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',1:'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
		terms={0:'–ù–µ –ø—Ä–∏–Ω—è–ª',1:'–ü—Ä–∏–Ω—è–ª'}
		if user is not None:
			await message.answer(f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{user[1]}\nID: <code>{user[0]}</code>\n–°—Ç–∞—Ç—É—Å: {ban[user[2]]}\n–ë–∞–ª–∞–Ω—Å: <code>{user[4]}</code>—Ä\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: <code>{user[5]}</code>—Ä\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user[7]}</code>—Ä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {terms[user[3]]}\n–ü—Ä–∏—à—ë–ª –æ—Ç: <code>{user[6]}</code>', reply_markup=kb_adm_user(user[0]))
		else:
			def kb_temp():
				keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
				s={'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É':f'admin_all_users','‚¨Ö–ù–∞–∑–∞–¥':'main_menu'}
				for x in s:
					keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
				return keyboard
			await message.answer('<b>üìõ –ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìõ</b>',reply_markup=kb_temp())
	else:
		if '@' in str(message.text): username=str(message.text.replace('@',''))
		else: username=str(message.text)
		cur.execute(f'SELECT * FROM users WHERE username="{username}"')
		user=cur.fetchone()
		ban={0:'–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',1:'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
		terms={0:'–ù–µ –ø—Ä–∏–Ω—è–ª',1:'–ü—Ä–∏–Ω—è–ª'}
		if user is not None:
			await message.answer(f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{user[1]}\nID: <code>{user[0]}</code>\n–°—Ç–∞—Ç—É—Å: {ban[user[2]]}\n–ë–∞–ª–∞–Ω—Å: <code>{user[4]}</code>—Ä\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: <code>{user[5]}</code>—Ä\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{user[7]}</code>—Ä\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ: {terms[user[3]]}\n–ü—Ä–∏—à—ë–ª –æ—Ç: <code>{user[6]}</code>', reply_markup=kb_adm_user(user[0]))
		else:
			def kb_temp():
				keyboard = InlineKeyboardMarkup(row_width=2,resize_keyboard=True)
				s={'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É':f'admin_all_users','‚¨Ö–ù–∞–∑–∞–¥':'main_menu'}
				for x in s:
					keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
				return keyboard
			await message.answer('<b>üìõ –ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìõ</b>',reply_markup=kb_temp())
@dp.message_handler(state=states.message_to_everyone)
async def message_to_everyone(message: types.Message, state: FSMContext):
	def kb_temp():
		keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
		s=['–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É','–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏']
		for x in s:
			keyboard.insert(KeyboardButton(x,callback_data=x))
		return keyboard
	await states.spam_check_photo.set()
	msg=await message.answer('<b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É?</b>', reply_markup=kb_temp())
	async with state.proxy() as data:
		data["message_to_delete"] = data["message_to_delete"]
		data["message_to_delete2"] = message
		data["message_to_delete4"] = msg
		data["text_to_send"] = str(message.text)
@dp.message_handler(state=states.spam_check_photo)
async def spam_check_photo(message: types.Message, state: FSMContext):
	if '–î–æ–±–∞–≤–∏—Ç—å' in str(message.text):
		await states.add_photo_spam.set()
		async with state.proxy() as data:
			data["message_to_delete"] = data["message_to_delete"]
			data["message_to_delete2"] = data["message_to_delete2"]
			data["message_to_delete3"] = message
			data["text_to_send"] = data["text_to_send"]
			data["type"] = 'photo'
			data['message_to_delete7']=await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É</b>')
	elif '–±–µ–∑' in str(message.text):
		await states.without_photo_spam.set()
		async with state.proxy() as data:
			data["message_to_delete"] = data["message_to_delete"]
			data["message_to_delete2"] = data["message_to_delete2"]
			data["message_to_delete3"] = message
			data["message_to_delete4"] = data["message_to_delete4"]
			data["text_to_send"] = data["text_to_send"]
			def kb_temp():
				keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
				s=['–î–∞','–ù–µ—Ç']
				for x in s:	keyboard.insert(KeyboardButton(x))
				return keyboard
			h=await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º:\n<code>{}</code>'.format(data['text_to_send']), reply_markup=kb_temp())
			j=await message.answer('–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç —Ç–∞–∫:\n\n{}'.format(data['text_to_send']))
			data['message_to_delete5'] = h
			data['message_to_delete6'] = j
@dp.message_handler(state=states.without_photo_spam)
async def without_photo_spam(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		await message.delete()
		await data['message_to_delete'].delete()
		await data['message_to_delete2'].delete()
		await data['message_to_delete3'].delete()
		await data['message_to_delete4'].delete()
		await data['message_to_delete5'].delete()
		await data['message_to_delete6'].delete()
	if '–î–∞' in str(message.text):
		async with state.proxy() as data:
			asyncio.create_task(send_message_to_user(data['text_to_send'], message.from_user.id))
	else:
		await message.answer('<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É</b>',reply_markup=kb_back())
	await state.finish()
@dp.message_handler(state=states.add_photo_spam, content_types=['photo','document'])
async def add_photo_spam(message: types.Message, state: FSMContext):
	name = random.randint(1,99999)
	if message.content_type == 'photo':
		await message.photo[-1].download(f'{name}.jpg')
	else:
		document_id = message.document.file_id
		file_info = await bot.get_file(document_id)
		fi = file_info.file_path
		urllib.request.urlretrieve(f'https://api.telegram.org/file/bot{tg_token}/{fi}',f'./{name}.jpg')
	await states.add_photo_spam2.set()
	async with state.proxy() as data:
		data['name'] = name
		data['message_to_delete8'] = message
		def kb_temp():
			keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
			s=['–î–∞','–ù–µ—Ç']
			for x in s:	keyboard.insert(KeyboardButton(x))
			return keyboard
		h=await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º:\n<code>{}</code>'.format(data['text_to_send']), reply_markup=kb_temp())
		j=await bot.send_photo(message.from_user.id, photo=open(f'{name}.jpg','rb'), caption='–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç —Ç–∞–∫:\n\n{}'.format(data['text_to_send']))
		data['message_to_delete5'] = h
		data['message_to_delete6'] = j
@dp.message_handler(state=states.add_photo_spam2)
async def add_photo_spam2(message: types.Message, state: FSMContext):
	if '–î–∞' in str(message.text):
		async with state.proxy() as data:
			await message.delete()
			await data['message_to_delete'].delete()
			await data['message_to_delete2'].delete()
			await data['message_to_delete3'].delete()
			await data['message_to_delete4'].delete()
			await data['message_to_delete5'].delete()
			await data['message_to_delete6'].delete()
			await data['message_to_delete7'].delete()
			await data['message_to_delete8'].delete()
			asyncio.create_task(send_message_to_user_photo(data['text_to_send'], data['name'], message.from_user.id))
	else:
		await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É')
	await state.finish()
@dp.message_handler(state=states.withdraw_details)
async def withdraw_details(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		await message.delete()
		await data['msg_1'].delete()
		id=data['uid']
		ps=data['payment_service']
		cur.execute(f'SELECT * FROM payment_services WHERE (id,payment_service)=({int(id)},"{str(ps)}")')
		if cur.fetchone() is None: cur.execute(f'INSERT INTO payment_services(id,username,payment_service,details) VALUES({message.from_user.id},"{message.from_user.username}","{ps}","{message.text}")')
		else: cur.execute(f'UPDATE payment_services SET details="{message.text}" WHERE (id,payment_service)=({int(id)},"{str(ps)}")')
		con.commit()
		await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!',reply_markup=kb_back_withdraws(ps))
	await state.finish()
@dp.message_handler(state=states.withdraw_amount)
async def withdraw_amount(message: types.Message, state: FSMContext):
	if message.text.isdigit():
		async with state.proxy() as data:
			await message.delete()
			await data['msg_1'].delete()
			id=data['uid']
			ps=data['payment_service']
			cur.execute(f'SELECT amount FROM payment_services WHERE (id,payment_service)=({int(id)},"{str(ps)}")')
			if cur.fetchone() is None: cur.execute(f'INSERT INTO payment_services(id,username,payment_service,amount) VALUES({message.from_user.id},"{message.from_user.username}","{ps}",{int(message.text)})')
			else: cur.execute(f'UPDATE payment_services SET amount={int(message.text)} WHERE (id,payment_service)=({int(id)},"{str(ps)}")')
			con.commit()
		await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!',reply_markup=kb_back_withdraws(ps))
	else:
		async with state.proxy() as data:
			await message.delete()
			await data['msg_1'].delete()
			ps=data['payment_service']
			await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>',reply_markup=kb_back_withdraws(ps))
	await state.finish()
#################################################################################################################################
async def send_message_to_user(text_to_send, from_userid):
	clear_address = InlineKeyboardMarkup()
	clear_address.add(InlineKeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª", url="t.me/logscheker_news"))
	cur.execute('SELECT id FROM users')
	ids=cur.fetchall()
	await bot.send_message(from_userid,f'<b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <code>{len(ids)}</code></b>')
	receive_users=0
	block_users=0
	for id in ids:
		try:
			await bot.send_message(id[0], text_to_send, reply_markup=clear_address)
			receive_users += 1
		except Exception as error:
			print(error)
			block_users += 1
		await asyncio.sleep(0.05)
	await bot.send_message(from_userid,f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òë</b>\n<b>üë§ –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{receive_users} ‚úÖ</code>\n<b>üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞:</b> <code>{block_users} ‚ùå</code>")
async def send_message_to_user_photo(text_to_send, photo, from_userid):
	clear_address = InlineKeyboardMarkup()
	clear_address.add(InlineKeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª", url="t.me/logscheker_news"))
	receive_users, block_users = 0, 0
	cur.execute('SELECT id FROM users')
	ids=cur.fetchall()
	for id in ids:
		try:
			await bot.send_photo(id[0], photo = open(f'{photo}.jpg', 'rb'),caption = text_to_send, reply_markup=clear_address)
			receive_users += 1
		except Exception as e:
			print(e)
			block_users += 1
		await asyncio.sleep(0.05)
	await bot.send_message(from_userid,f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚òë</b>\n<b>üë§ –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{receive_users} ‚úÖ</code>\n<b>üë§ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞:</b> <code>{block_users} ‚ùå</code>")
async def upload_logs(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		message_to_delete = data["message_to_delete"]
	await message.delete()
	await message_to_delete.delete()
	await state.finish()
	id=message.from_user.id
	if message.content_type == "document":
		try:
			file = await bot.get_file(message.document.file_id)
			ServerPath = file.file_path
			ServerFilename = ServerPath.split("/")[-1]
			LogURL = f"https://api.telegram.org/file/bot{tg_token}/{ServerPath}"
			if not message.document.file_name.lower().endswith(".zip"):
				await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .zip –∞—Ä—Ö–∏–≤")
				return
		except FileIsTooBig:
			await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤–µ—Å–æ–º –¥–æ 20–º–±")
			return
	elif message.content_type == "text":
		LogURL = message.text
		ServerFilename = None
		if not LogURL.startswith("http") or not LogURL.startswith("https"):
			await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–≥–∏, –∏–ª–∏ –∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip –≤–µ—Å–æ–º –¥–æ 20–º–±")
			return
	cur.execute('SELECT lastlogid FROM bysoblazn')
	lastlogid=(cur.fetchone())[0]
	upload_time=round(datetime.now().timestamp())
	if ServerFilename == None: message_to_sent=f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–æ–≥–∏!\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏: <a href='{LogURL}'>{LogURL}</a>\n\nLogID: <code>{lastlogid}</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={id}'>@{message.from_user.username}</a>\nUser ID: <code>{id}</code>"
	else: message_to_sent=f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ª–æ–≥–∏!\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏: <b><a href='{LogURL}'>–∫–ª–∏–∫</a></b>\n–ò–º—è —Ñ–∞–π–ª–∞: <code>{ServerFilename}</code>\n\nLogID: <code>{lastlogid}</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={id}'>@{message.from_user.username}</a>\nUser ID: <code>{id}</code>"
	cur.execute(f'UPDATE bysoblazn SET lastlogid={lastlogid+1}')
	cur.execute(f'INSERT INTO logs(id,uid,username,download_url,date,filename) VALUES ({lastlogid+1},{id},"{message.from_user.username}","{LogURL}",{upload_time},"{ServerFilename}")')
	con.commit()
	for x in admins:
		await bot.send_message(x,message_to_sent)
	await message.answer(f"–õ–æ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n\nLogID: <code>{lastlogid}</code>", reply_markup=kb_back())
#################################################################################################################################
async def on_startup(dp):
	async def set_default_commands(dp):
		await dp.bot.set_my_commands([types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
	await set_default_commands(dp)
	global botdata
	botdata = await bot.get_me()
	cur.execute('SELECT lastlogid FROM bysoblazn')
	for id in admins:
		await bot.send_message(id, '<b>‚úÖ –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @soblazncc</b>')
	if cur.fetchone() is None:
		cur.execute('INSERT INTO users(id,username,from_refer_id) VALUES (666,"bysoblazn",852275785)')
		cur.execute('INSERT INTO bysoblazn(lastlogid) VALUES(0)')
		con.commit()
if __name__ == '__main__':
	executor.start_polling(dp, on_startup=on_startup)